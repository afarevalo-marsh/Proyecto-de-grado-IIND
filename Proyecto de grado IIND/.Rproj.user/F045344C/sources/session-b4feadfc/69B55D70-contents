#### RScript - Control de la Contaminacion #### 
# Author: Ricardo A. Silva
# Date: 2/11/2023
# R version 4.3.1
# Laboratorio 6
## ------------------------------------------ ## 

# Limpiar el entorno
rm(list = ls())

## Instalación de paquetes ------------------
#install.packages("pacman")
library(pacman)
p_load(tidyverse,  # Paquete grande de manipulacion
       lubridate,  # Paquete para manejo de fechas
       skimr,      # Paquete para revision de datos
       stargazer,  # Paquete de tablas "bonitas", regs y estad desc
       dplyr,      # Paquete parte de tidyverse donde esta mutate, select, filter, summarise...
       rio,        # Paquete de importacion/exportacion de datos
       gridExtra, patchwork, stats)        

# Manejo del directorio
getwd()
directorio <- "C:/Users/windows/Documents/Andes/Semestre_10/Control de la contaminacion/Actividades/Lab 6"

setwd(directorio)

# Chequeo de los archivos del directorio
dir()
list.files()

## Importacion de los datos ------------------
install_formats() # Cuestiones de importacion de archivos del paquete rio
data <- import("Probability_of_Exceedances.xls")

skim(data)
glimpse(data)
stargazer(data, 
          type = "text",
          title = "Estadisticas Descriptivas")


## Graficos ------------------------------
# Unir diferentes plots en uno solo!
# https://medium.com/@pawanjangra1198/combining-plots-in-ggplot2-9699acaa2942
# https://stackoverflow.com/questions/75697325/how-can-i-combine-two-plots-that-share-the-same-x-axis-seamlessly-one-is-stacke
min(data$myday)
max(data$myday)

# Serie de tiempo
p_co <- ggplot(data, aes(myday, co)) +
  geom_line() +
  labs(x = "Tiempo", 
       y = "CO",
       title = "Evoluación del C0 durante 2017-2020") +
  theme_minimal()
p_co

p_no2 <- ggplot(data, aes(myday, no2)) +
  geom_line() +
  labs(x = "Tiempo", 
       y = "CO",
       title = "Evoluación del NO2 durante 2017-2020") +
  theme_minimal()
p_no2

p_pm25 <- ggplot(data, aes(myday, pm25)) +
  geom_line() +
  labs(x = "Tiempo", 
       y = "CO",
       title = "Evoluación del PM2.5 durante 2017-2020") +
  theme_minimal()
p_pm25

p_o3 <- ggplot(data, aes(myday, o3)) +
  geom_line() +
  labs(x = "Tiempo", 
       y = "CO",
       title = "Evoluación del O3 durante 2017-2020") +
  theme_minimal()
p_o3

p_so2 <- ggplot(data, aes(myday, so2)) +
  geom_line() +
  labs(x = "Tiempo", 
       y = "CO",
       title = "Evoluación del SO2 durante 2017-2020") +
  theme_minimal()
p_so2


# Ahora le vamos a colocar al PM2.5 una linea para denotar el AQG
# Estandar de la OMS
p_pm25 + geom_hline(aes(yintercept = 15), data, color = "red")


## Variable de excesos y modelación binaria -----------------------
# Crear variables de los excedentes
data <- data %>% mutate(ex_pm = case_when(pm25 >= 15 ~ 1,
                                          .default = 0))
sum(is.na(data$ex_pm))


# Estimacion de la probabilidad de exceder el AGQ - Modelo PROBIT
?stats

# Variable dependiente: ex_pm
# as.factor(X): Definir variable como una categorica
probit_model <- glm(formula = ex_pm ~ rain + tmp + ws + as.factor(dow) + as.factor(month) + as.factor(year),
                    data = data, 
                    family = binomial(link = "probit")) 

# Chequeo de los resultados
stargazer(probit_model, type = "text")

# Valores predichos en nuestra base de datos
data <- data %>% mutate(ex_pm_hat = probit_model$fitted.values)

view(data)

p_pm25_prob <- ggplot(data, aes(myday, ex_pm_hat)) +
  geom_line() +
  labs(x = "Tiempo", 
       y = "Probabilidad",
       title = "Evoluación de la probabilidad") +
  theme_minimal()
p_pm25_prob

p_pm25_prob2 <- ggplot(data, aes(ws, ex_pm_hat)) +
  geom_point() +
  labs(x = "Velocidad del Viento", 
       y = "Probabilidad",
       title = "Evoluación de la probabilidad con Viento") +
  theme_minimal()
p_pm25_prob2



## Manejo de la variable de velocidad del viento ------------
max(data$ws)
min(data$ws)

data <- data %>% mutate(ws_class = case_when(ws < 0.1 ~ 0,
                                             ws >= 0.1 & ws < 0.3 ~ 0.2,
                                             ws >= 0.3 & ws < 0.5 ~ 0.4,
                                             ws >= 0.5 & ws < 0.7 ~ 0.6,
                                             ws >= 0.7 & ws < 0.9 ~ 0.8,
                                             ws >= 0.9 & ws < 1.1 ~ 1.0,
                                             ws >= 1.1 & ws < 1.3 ~ 1.2,
                                             ws >= 1.3 & ws < 1.5 ~ 1.4,
                                             ws >= 1.5 & ws < 1.7 ~ 1.6,
                                             ws >= 1.7 & ws < 1.9 ~ 1.8,
                                             ws >= 1.9 & ws < 2.1 ~ 2.0,
                                             ws >= 2.1 & ws < 2.3 ~ 2.2,
                                             ws >= 2.3 & ws < 2.5 ~ 2.4,
                                             ws >= 2.5 & ws < 2.7 ~ 2.6,
                                             ws >= 2.7 & ws < 2.9 ~ 2.8,
                                             ws >= 2.9 & ws < 3.1 ~ 3.0))


## Funcion Group_by() con summarise()
data_ws_col <- data %>% group_by(ws_class) %>% 
  summarise(mean_prob = mean(ex_pm_hat)) %>% 
              as.tibble()

p_pm25_col <- ggplot(data_ws_col, aes(ws_class, mean_prob)) +
  geom_point() +
  geom_line() +
  labs(x = "Velocidad del Viento", 
       y = "Probabilidad",
       title = "Evoluación de la probabilidad con Viento") +
  theme_minimal()
p_pm25_col


data_ws_col2 <- data %>% group_by(ws_class, month) %>% 
  summarise(mean_prob = mean(ex_pm_hat)) %>% 
  as.tibble()
data_ws_col2 <- data_ws_col2 %>% mutate(month =  as.character(month))

p_pm25_col2 <- ggplot(data_ws_col2, aes(ws_class, mean_prob, col = month)) +
  geom_point() +
  geom_line() +
  labs(x = "Velocidad del Viento", 
       y = "Probabilidad",
       title = "Evoluación de la probabilidad con Viento") +
  theme_minimal()
p_pm25_col2



## NO2 --------
# Toca pasar de unidades ppm a microgramos por metro cubico
names(data)
# *1.88 POR TENER LAS MISMAS UNIDADES DE LA OMS
data <- data %>% mutate(no2_new = no2*1.88)
hist(data$no2_new)

p_no2_new <- ggplot(data, aes(myday, no2_new)) +
  geom_line() +
  labs(x = "Tiempo", 
       y = "NO2",
       title = "Evoluación del NO2 durante 2017-2020",
       caption = "Unidades: Microgramo por M3") +
  theme_minimal() +
  geom_hline(aes(yintercept = 25), data, color = "red")
p_no2_new


data <- data %>% mutate(exc_no2 = case_when(no2_new >= 25 ~ 1,
                                            .default = 0))
table(data$exc_no2)

# Modelo Probit
probit_model2 <- glm(formula = exc_no2 ~ rain + tmp + ws + as.factor(dow) + as.factor(month) + as.factor(year),
                    data = data, 
                    family = binomial(link = "probit")) 

# Chequeo de los resultados
stargazer(probit_model2, type = "text")

# Valores predichos en nuestra base de datos
data <- data %>% mutate(ex_no2_hat = probit_model2$fitted.values)

p_ex_no2_prob <- ggplot(data, aes(myday, ex_no2_hat)) +
  geom_line() +
  labs(x = "Tiempo", 
       y = "Probabilidad Exceso NO2",
       title = "Evoluación de la probabilidad") +
  theme_minimal()
p_ex_no2_prob

p_ex_no2_prob2 <- ggplot(data, aes(ws, ex_no2_hat)) +
  geom_point() +
  labs(x = "Velocidad del Viento", 
       y = "Probabilidad Exceso NO2",
       title = "Evoluación de la probabilidad con Viento") +
  theme_minimal()
p_ex_no2_prob2



# Agrupacion
data_ws_col2 <- data %>% group_by(ws_class) %>% 
  summarise(mean_prob = mean(ex_no2_hat)) %>% 
  as.tibble()

p_no2_col <- ggplot(data_ws_col2, aes(ws_class, mean_prob)) +
  geom_point() + 
  geom_line() +
  labs(x = "Velocidad del Viento", 
       y = "Probabilidad de Exceso de NO2",
       title = "Evoluación de la probabilidad con Viento") +
  theme_minimal()
p_no2_col

data_ws_col2 <- data %>% group_by(ws_class, month) %>% 
  summarise(mean_prob = mean(ex_no2_hat)) %>% 
  as.tibble()

p_no2_col2 <- ggplot(data_ws_col2, aes(ws_class, mean_prob, col = as.factor(month))) +
  geom_point() +
  geom_line() +
  labs(x = "Velocidad del Viento", 
       y = "Probabilidad de Exceso de NO2",
       title = "Evoluación de la probabilidad con Viento") +
  theme_minimal()
p_no2_col2

## CO --------
# Toca pasar ppm de CO a ppb. Luego de ppb a microgramos por m3 y luego a miligramos
data <- data %>% mutate(co_new = co*1000*1.15/1000)
# Esto para dejarlo en las mismas unidades

p_co_new <- ggplot(data, aes(myday, co_new)) +
  geom_line() +
  labs(x = "Tiempo", 
       y = "Niveles de CO",
       title = "Evoluación del CO de 2017-2020",
       caption = "Unidades: Miligramos por M3") +
  theme_minimal() +
  geom_hline(aes(yintercept = 4), data, color = "red")
p_co_new

