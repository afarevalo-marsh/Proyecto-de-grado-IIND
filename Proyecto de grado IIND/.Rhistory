puesto == "5" ~ "#FFA500",
puesto == "6" ~ "#FFB800",
puesto == "7" ~ "#EED200",
puesto == "8" ~ "#FFE800",
puesto == "9" ~ "#FFFF00",
puesto == "10" ~ "#BFFF00",
puesto == "11" ~ "#7FFF00",
puesto == "12" ~ "#3FFF00",
puesto == "13" ~ "#00FF00"
))
# Encontramos el queremos que sea el centro del mapa
latitud_central <- mean(db$lat)
longitud_central <- mean(db$lng)
# Creamos el plot
mymap <-leaflet() %>%
addTiles() %>%
setView(lng = longitud_central, lat = latitud_central, zoom = 12) %>%
addCircles(lng = db$lng,
lat = db$lat,
color = "#000000",       # Aplicamos el color del borde
fillColor = db$color,    # Aplicamos el color de relleno
fillOpacity = 1,
weight = 2,              # Definimos el grosor del borde
opacity = 1,
radius = 700)
mymap
# Guardar el mapa como PNG
mapshot(mymap, file = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos/35. Mapa_PM10.png", quietly = TRUE)
View(db)
# Guardar el mapa como PNG
mapshot(mymap, file = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos/34.Mapa_PM25.png", quietly = TRUE)
# Limpiar el entorno
rm(list = ls())
library(rio)
library(sf)
library(ggplot2)
library(pacman)
library(tidyverse)
library(rio)
library(viridis)
library(leaflet)
library(tmaptools)
library(tidycensus)
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
library(summarytools)
library(officer)
library(plotly)
library(tmaptools)
library(osmdata)
library(tidymodels)
library(mapview)
library(webshot)
library(RColorBrewer)
# Manejo del directorio
getwd()
directorio <- "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos"
setwd(directorio)
# Chequeo de los archivos del directorio
dir()
list.files()
## Importacion de los datos ------------------
install_formats() # Cuestiones de importacion de archivos del paquete rio
db <- import("9. Mapa_R_PM10.xlsx")
# Escalas de colores.
db <- db %>%
mutate(color = case_when(puesto == "1" ~ "#FF0000",
puesto == "2" ~ "#FF2900",
puesto == "3" ~ "#FF2900",
puesto == "4" ~ "#FF7B00",
puesto == "5" ~ "#FFA500",
puesto == "6" ~ "#FFB800",
puesto == "7" ~ "#EED200",
puesto == "8" ~ "#FFE800",
puesto == "9" ~ "#FFFF00",
puesto == "10" ~ "#BFFF00",
puesto == "11" ~ "#7FFF00",
puesto == "12" ~ "#3FFF00",
puesto == "13" ~ "#00FF00"
))
# Encontramos el queremos que sea el centro del mapa
latitud_central <- mean(db$lat)
longitud_central <- mean(db$lng)
# Creamos el plot
mymap <-leaflet() %>%
addTiles() %>%
setView(lng = longitud_central, lat = latitud_central, zoom = 12) %>%
addCircles(lng = db$lng,
lat = db$lat,
color = "#000000",       # Aplicamos el color del borde
fillColor = db$color,    # Aplicamos el color de relleno
fillOpacity = 1,
weight = 2,              # Definimos el grosor del borde
opacity = 1,
radius = 700)
mymap
# Guardar el mapa como PNG
mapshot(mymap, file = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos/35. Mapa_PM10.png", quietly = TRUE)
# Limpiar el entorno
rm(list = ls())
library(rio)
library(sf)
library(ggplot2)
library(pacman)
library(tidyverse)
library(rio)
library(viridis)
library(leaflet)
library(tmaptools)
library(tidycensus)
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
library(summarytools)
library(officer)
library(plotly)
library(tmaptools)
library(osmdata)
library(tidymodels)
library(mapview)
library(webshot)
library(RColorBrewer)
# Manejo del directorio
getwd()
directorio <- "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos"
setwd(directorio)
# Chequeo de los archivos del directorio
dir()
list.files()
## Importacion de los datos ------------------
install_formats() # Cuestiones de importacion de archivos del paquete rio
db <- import("9. Mapa_R_PM10.xlsx")
# Escalas de colores.
db <- db %>%
mutate(color = case_when(puesto == "1" ~ "#FF0000",
puesto == "2" ~ "#FF2900",
puesto == "3" ~ "#FF2900",
puesto == "4" ~ "#FF7B00",
puesto == "5" ~ "#FFA500",
puesto == "6" ~ "#FFB800",
puesto == "7" ~ "#EED200",
puesto == "8" ~ "#FFE800",
puesto == "9" ~ "#FFFF00",
puesto == "10" ~ "#BFFF00",
puesto == "11" ~ "#7FFF00",
puesto == "12" ~ "#3FFF00",
puesto == "13" ~ "#00FF00"
))
# Encontramos el queremos que sea el centro del mapa
latitud_central <- mean(db$lat)
longitud_central <- mean(db$lng)
# Creamos el plot
mymap <-leaflet() %>%
addTiles() %>%
setView(lng = longitud_central, lat = latitud_central, zoom = 12) %>%
addCircles(lng = db$lng,
lat = db$lat,
color = "#000000",       # Aplicamos el color del borde
fillColor = db$color,    # Aplicamos el color de relleno
fillOpacity = 1,
weight = 2,              # Definimos el grosor del borde
opacity = 1,
radius = 700)
mymap
# Guardar el mapa como PNG
mapshot(mymap, file = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos/35. Mapa_PM10.png", quietly = TRUE)
View(db)
# Limpiar el entorno
rm(list = ls())
library(rio)
library(sf)
library(ggplot2)
library(pacman)
library(tidyverse)
library(rio)
library(viridis)
library(leaflet)
library(tmaptools)
library(tidycensus)
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
library(summarytools)
library(officer)
library(plotly)
library(tmaptools)
library(osmdata)
library(tidymodels)
library(mapview)
library(webshot)
library(RColorBrewer)
# Manejo del directorio
getwd()
directorio <- "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos"
setwd(directorio)
# Chequeo de los archivos del directorio
dir()
list.files()
## Importacion de los datos ------------------
install_formats() # Cuestiones de importacion de archivos del paquete rio
db <- import("9. Mapa_R_PM25.xlsx")
View(db)
# Escalas de colores.
db <- db %>%
mutate(color = case_when(puesto == "1" ~ "#FF0000",
puesto == "2" ~ "#FF2900",
puesto == "3" ~ "#FF2900",
puesto == "4" ~ "#FF7B00",
puesto == "5" ~ "#FFA500",
puesto == "6" ~ "#FFB800",
puesto == "7" ~ "#EED200",
puesto == "8" ~ "#FFE800",
puesto == "9" ~ "#FFFF00",
puesto == "10" ~ "#BFFF00",
puesto == "11" ~ "#7FFF00",
puesto == "12" ~ "#3FFF00",
puesto == "13" ~ "#00FF00"
))
# Encontramos el queremos que sea el centro del mapa
latitud_central <- mean(db$lat)
longitud_central <- mean(db$lng)
# Creamos el plot
mymap <-leaflet() %>%
addTiles() %>%
setView(lng = longitud_central, lat = latitud_central, zoom = 12) %>%
addCircles(lng = db$lng,
lat = db$lat,
color = "#000000",       # Aplicamos el color del borde
fillColor = db$color,    # Aplicamos el color de relleno
fillOpacity = 1,
weight = 2,              # Definimos el grosor del borde
opacity = 1,
radius = 700)
mymap
# Guardar el mapa como PNG
mapshot(mymap, file = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos/34.Mapa_PM25.png", quietly = TRUE)
# Limpiar el entorno
rm(list = ls())
## Librerias ------------------
library(pacman)
library(tidyverse) # Paquete grande de manipulacion
library(lubridate) # Paquete para manejo de fechas
library(skimr)     # Paquete para revision de datos
library(stargazer) # Paquete de tablas "bonitas", regs y estad desc
library(dplyr)     # Paquete parte de tidyverse donde esta mutate, select, filter, summarise...
library(rio)       # Paquete de importacion/exportacion de datos
library(gridExtra)
library(patchwork)
library(stats)
library(readxl)
library(writexl)
library(ggplot2)
library(officer)
library(flextable)
library(pscl)
library(corrplot)   # Para el gráfico de correlación
library(devtools)
library(fpp3)
library(urca)
library(vars)
library(MTS)
library(tseries) # Importamos la librería de tserires para la aplicación de la prueba de Dickey Fuller.
# Manejo del directorio
getwd()
directorio <- "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos"
setwd(directorio)
# Chequeo de los archivos del directorio
dir()
list.files()
## Importacion de los datos ------------------
install_formats() # Cuestiones de importacion de archivos del paquete rio
da <- import("7. Bogota_Promedio_Dias_Act_VECM.xlsx")
# Convertir la base de datos "da" a formato ts
da.ts <- ts(da[2:6], start = as.Date(2021), frequency = 365)
plot(da.ts)
pm25=diff(da.ts[,1],1)
radsolar=diff(da.ts[,2],1)
ws=diff(da.ts[,3],1)
pressure=diff(da.ts[,4],1)
tmp=diff(da.ts[,5],1)
z=cbind.data.frame(pm25,radsolar,ws,pressure,tmp)
# Evaluará modelos VAR con hasta 7 retardos.
nivelka=VARselect(z, lag.max = 7, type = "const")
nivelka$selection
# Aplicamos la prueba de Johansen para la identificación de relaciones lineales
# entre las series, lo que nos indica la condición de cointegración.
johatest=ca.jo(z, type = "trace", K=2, ecdet ="none", spec = "longrun")
summary(johatest)
adf.test(da[,2])
summary(johatest)
adf.test(da[,2])
adf.test(da[,3])
adf.test(da[,4])
adf.test(da[,5])
adf.test(da[,6])
adf.test(da[,7])
adf.test(da[,8])
nivelk$selection
# B: Regresión VAR.
#Podemos volver a llamar la librería de vars y aplicar el regresión habiendo encontrado que p=2.
library(vars)
m0=vars::VAR(z, p=6)
summary(m0)
modelo_VAR <- summary(m0)
# Chequeo de los resultados
stargazer(modelo_VAR, type = "text", out = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/5. Salidas de R/18. probit_VAR.doc")
# Chequeo de los resultados
stargazer(modelo_VAR, type = "text", out = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/5. Salidas de R/18. probit_VAR.doc")
?stargazer
modelo_VAR <- summary(m0)
# Chequeo de los resultados
stargazer(modelo_VAR, type = "text", summary = TRUE, out = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/5. Salidas de R/18. probit_VAR.doc")
# Chequeo de los resultados
stargazer(modelo_VAR, summary = TRUE, out = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/5. Salidas de R/18. probit_VAR.doc")
?stargazer
# B: Regresión VAR.
#Podemos volver a llamar la librería de vars y aplicar el regresión habiendo encontrado que p=2.
library(vars)
m0=vars::VAR(z, p=6)
# B: Regresión VAR.
#Podemos volver a llamar la librería de vars y aplicar el regresión habiendo encontrado que p=2.
library(vars)
m0=vars::VAR(z, p=6)
summary(m0)
modelo_VAR <- summary(m0)
# Chequeo de los resultados
stargazer(modelo_VAR, type = "text", out = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/5. Salidas de R/18. probit_VAR.doc")
library(texreg)
install.packages("texreg")
library(texreg)
# Usar texreg para manejar el resumen del modelo VAR
texreg(modelo_VAR, file = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/5. Salidas de R/18. probit_VAR.doc")
# Crear un documento de Word
doc <- read_docx()
# Añadir el resumen del modelo al documento
doc <- doc %>%
body_add_par("Resumen del Modelo VAR:", style = "heading 1") %>%
body_add_par(capture.output(modelo_VAR), style = "Normal")
# Guardar el documento
print(doc, target = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/5. Salidas de R/18. Model_VAR.doc")
# B: Regresión VAR.
#Podemos volver a llamar la librería de vars y aplicar el regresión habiendo encontrado que p=2.
library(vars)
m0=vars::VAR(z, p=6)
summary(m0)
modelo_VAR <- summary(m0)
# Capturar la salida y escribirla en un archivo
output <- capture.output(modelo_VAR)
writeLines(output, "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/5. Salidas de R/18. Model_VAR.doc")
# Limpiar el entorno
rm(list = ls())
## Librerias ------------------
library(pacman)
library(tidyverse) # Paquete grande de manipulacion
library(lubridate) # Paquete para manejo de fechas
library(skimr)     # Paquete para revision de datos
library(stargazer) # Paquete de tablas "bonitas", regs y estad desc
library(dplyr)     # Paquete parte de tidyverse donde esta mutate, select, filter, summarise...
library(rio)       # Paquete de importacion/exportacion de datos
library(gridExtra)
library(patchwork)
library(stats)
library(readxl)
library(writexl)
library(ggplot2)
library(officer)
library(flextable)
library(pscl)
library(corrplot)   # Para el gráfico de correlación
library(devtools)
library(fpp3)
library(tseries) # Importamos la librería de tserires para la aplicación de la prueba de Dickey Fuller.
library(PerformanceAnalytics)
library(fBasics)
library(tsDyn)
library(urca)
library(vars)
library(MTS)
library(xts)
library(quantmod)
library(stats)
library(fBasics)
options(warn = - 1)
# Manejo del directorio
getwd()
directorio <- "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos"
setwd(directorio)
# Chequeo de los archivos del directorio
dir()
list.files()
## Importacion de los datos ------------------
install_formats() # Cuestiones de importacion de archivos del paquete rio
da <- import("7. Bogota_Promedio_Dias_Act_VECM.xlsx")
# Convertir la base de datos "da" a formato ts
da.ts <- ts(da[2:6], start = as.Date(2021), frequency = 365)
plot(da.ts)
pm25=diff(da.ts[,1],1)
radsolar=diff(da.ts[,2],1)
ws=diff(da.ts[,3],1)
pressure=diff(da.ts[,4],1)
tmp=diff(da.ts[,5],1)
z=cbind.data.frame(pm25,radsolar,ws,pressure,tmp)
head(z)
str(z)
# Evaluará modelos VAR con hasta 7 retardos.
nivelka=VARselect(z, lag.max = 7, type = "const")
nivelka$selection
niv1=VARorder(z)
# Aplicamos la prueba de Johansen para la identificación de relaciones lineales
# entre las series, lo que nos indica la condición de cointegración.
johatest=ca.jo(da.ts, type = "trace", K=6, ecdet ="none", spec = "longrun")
summary(johatest)
pm25=diff(da.ts[,1],1)
tmp=diff((da.ts[,2]),1)
radsolar=diff(da.ts[,3],1)
pressure=diff(da.ts[,4],1)
ws=diff(da.ts[,5],1)
z=cbind.data.frame(pm25,tmp,radsolar,pressure,ws)
head(z)
str(z)
vecm1 = VECM(z, lag=7, r=4, estim = ("ML"))
summary(vecm1)
modelo_VAR <- summary(vecm1)
# Capturar la salida y escribirla en un archivo
output <- capture.output(modelo_VAR)
modelo_VECM <- summary(vecm1)
# Capturar la salida y escribirla en un archivo
output <- capture.output(modelo_VECM)
# Capturar la salida y escribirla en un archivo
output <- capture.output(modelo_VECM)
writeLines(output, "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/5. Salidas de R/19. Model_VECM.doc")
# Limpiar el entorno
rm(list = ls())
## Librerias ------------------
library(pacman)
library(tidyverse) # Paquete grande de manipulacion
library(lubridate) # Paquete para manejo de fechas
library(skimr)     # Paquete para revision de datos
library(stargazer) # Paquete de tablas "bonitas", regs y estad desc
library(dplyr)     # Paquete parte de tidyverse donde esta mutate, select, filter, summarise...
library(rio)       # Paquete de importacion/exportacion de datos
library(gridExtra)
library(patchwork)
library(stats)
library(readxl)
library(writexl)
library(ggplot2)
library(officer)
library(flextable)
library(pscl)
library(corrplot)   # Para el gráfico de correlación
library(devtools)
library(fpp3)
library(tseries) # Importamos la librería de tserires para la aplicación de la prueba de Dickey Fuller.
library(PerformanceAnalytics)
library(fBasics)
library(tsDyn)
library(urca)
library(vars)
library(MTS)
library(xts)
library(quantmod)
library(stats)
library(fBasics)
library(ARDL)
library(urca)
library(TSstudio)
library(quantmod)
library(fields)
library(dygraphs)
options(warn = - 1)
# Manejo del directorio
getwd()
directorio <- "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos"
setwd(directorio)
# Chequeo de los archivos del directorio
dir()
list.files()
## Importacion de los datos ------------------
install_formats() # Cuestiones de importacion de archivos del paquete rio
da <- import("7. Bogota_Promedio_Dias_Act_VECM.xlsx")
# Convertir la base de datos "da" a formato ts
da.ts <- ts(da[2:6], start = as.Date(2021), frequency = 365)
plot(da.ts)
pm25=diff(da.ts[,1],1)
radsolar=diff(da.ts[,2],1)
ws=diff(da.ts[,3],1)
pressure=diff(da.ts[,4],1)
tmp=diff(da.ts[,5],1)
z=cbind.data.frame(pm25,radsolar,ws,pressure,tmp)
head(z)
str(z)
#Selección automatica:
models <- auto_ardl(pm25 ~ radsolar + ws + pressure + tmp, da = z, lamda = TRUE,max_order = 6)
#Revisemos el top 20 de los mejores modelos según su critrio de información de Akaike
models$top_orders
#Procedemos a construir el modelo de regresión con la mejor combinación.
mod1 <- ardl(pm25 ~ radsolar + ws + pressure + tmp, data = z, lamda = TRUE ,order = c(6,6,6,6,6))
summary(mod1)
# Para la interpretación, podemos imprimir los rezagos correspondientes de cada variable que explican la respuesta.
mod1$full_formula
#Predicción del primer modelo sin tendencia:
stats::predict(mod1$fitted.values, 10)
summary(mod1)
modelo_ARDL <- summary(mod1)
# Capturar la salida y escribirla en un archivo
output <- capture.output(modelo_ARDL)
writeLines(output, "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/5. Salidas de R/20. Model_ARDL.doc")
