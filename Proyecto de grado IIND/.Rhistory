radsolar = if_else(is.na(radsolar), radsolar_avg, radsolar),
rain = if_else(is.na(rain), rain_avg, rain),
o3 = if_else(is.na(o3), o3_avg, o3),
no2 = if_else(is.na(no2), no2_avg, no2),
pm25 = if_else(is.na(pm25), pm25_avg, pm25),
co = if_else(is.na(co), co_avg, co),
bc = if_else(is.na(bc), bc_avg, bc)
) %>%
select(-ends_with("_avg"))  # Elimina las columnas de promedios temporales
summary(SanCristobal_Por_Dias)
# Guardar como archivo .RDS:
saveRDS(SanCristobal_Por_Dias, "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos/3.6 SanCristobal_Por_Dias.rds")
# Importar datos
Tunal_Por_Horas <- read_excel("1. Datos (2021 -2024) - Por Horas.xlsx",
sheet = "Tunal")
Tunal_Por_Dias <- read_excel("2. Datos (2021 -2024) - Diarios.xlsx")
# Calculo de promedios
promedios_diarios <- Tunal_Por_Horas %>%
group_by(Dia) %>%
summarise(
pm10_avg = mean(PM10, na.rm = TRUE),
tmp_avg = mean(Temperatura, na.rm = TRUE),
ws_avg = mean(VelViento, na.rm = TRUE),
rh_avg = mean(HR, na.rm = TRUE),
radsolar_avg = mean(RadSolar, na.rm = TRUE),
rain_avg = mean(Precipitacion, na.rm = TRUE),
o3_avg = mean(OZONO, na.rm = TRUE),
no2_avg = mean(NO2, na.rm = TRUE),
pm25_avg = mean(PM25, na.rm = TRUE),
co_avg = mean(CO, na.rm = TRUE),
so2_avg = mean(SO2, na.rm = TRUE),
bc_avg = mean(BC, na.rm = TRUE),
PresionBaro_avg = mean(PresionBaro, na.rm = TRUE)
)
Tunal_Por_Dias <- Tunal_Por_Dias %>%
left_join(promedios_diarios, by = c("myday" = "Dia")) %>%
mutate(
pm10 = if_else(is.na(pm10), pm10_avg, pm10),
tmp = if_else(is.na(tmp), tmp_avg, tmp),
ws = if_else(is.na(ws), ws_avg, ws),
rh = if_else(is.na(rh), rh_avg, rh),
radsolar = if_else(is.na(radsolar), radsolar_avg, radsolar),
rain = if_else(is.na(rain), rain_avg, rain),
o3 = if_else(is.na(o3), o3_avg, o3),
no2 = if_else(is.na(no2), no2_avg, no2),
pm25 = if_else(is.na(pm25), pm25_avg, pm25),
co = if_else(is.na(co), co_avg, co),
so2 = if_else(is.na(so2), so2_avg, so2),
bc = if_else(is.na(bc), bc_avg, bc),
pressure = if_else(is.na(pressure), PresionBaro_avg, pressure)
) %>%
select(-ends_with("_avg"))  # Elimina las columnas de promedios temporales
summary(Tunal_Por_Dias)
# Guardar como archivo .RDS:
saveRDS(Tunal_Por_Dias, "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos/3.7 Tunal_Por_Dias.rds")
# Importar datos
Bolivia_Por_Horas <- read_excel("1. Datos (2021 -2024) - Por Horas.xlsx",
sheet = "Bolivia")
Bolivia_Por_Dias <- read_excel("2. Datos (2021 -2024) - Diarios.xlsx")
# Calculo de promedios
promedios_diarios <- Bolivia_Por_Horas %>%
group_by(Dia) %>%
summarise(
pm10_avg = mean(PM10, na.rm = TRUE),
o3_avg = mean(OZONO, na.rm = TRUE),
no2_avg = mean(NO2, na.rm = TRUE),
pm25_avg = mean(PM25, na.rm = TRUE),
co_avg = mean(CO, na.rm = TRUE),
so2_avg = mean(SO2, na.rm = TRUE)
)
Bolivia_Por_Dias <- Bolivia_Por_Dias %>%
left_join(promedios_diarios, by = c("myday" = "Dia")) %>%
mutate(
pm10 = if_else(is.na(pm10), pm10_avg, pm10),
o3 = if_else(is.na(o3), o3_avg, o3),
no2 = if_else(is.na(no2), no2_avg, no2),
pm25 = if_else(is.na(pm25), pm25_avg, pm25),
co = if_else(is.na(co), co_avg, co),
so2 = if_else(is.na(so2), so2_avg, so2)
) %>%
select(-ends_with("_avg"))  # Elimina las columnas de promedios temporales
summary(Bolivia_Por_Dias)
View(Bolivia_Por_Horas)
str(Bolivia_Por_Dias)
# Importar datos
Bolivia_Por_Horas <- read_excel("1. Datos (2021 -2024) - Por Horas.xlsx",
sheet = "Bolivia")
Bolivia_Por_Dias <- read_excel("2. Datos (2021 -2024) - Diarios.xlsx")
# Calculo de promedios
promedios_diarios <- Bolivia_Por_Horas %>%
group_by(Dia) %>%
summarise(
pm10_avg = mean(PM10, na.rm = TRUE),
o3_avg = mean(OZONO, na.rm = TRUE),
no2_avg = mean(NO2, na.rm = TRUE),
pm25_avg = mean(PM25, na.rm = TRUE),
co_avg = mean(CO, na.rm = TRUE),
so2_avg = mean(SO2, na.rm = TRUE)
)
Bolivia_Por_Dias <- Bolivia_Por_Dias %>%
left_join(promedios_diarios, by = c("myday" = "Dia")) %>%
mutate(
pm10 = if_else(is.na(pm10), pm10_avg, pm10),
o3 = if_else(is.na(o3), o3_avg, o3),
no2 = if_else(is.na(no2), no2_avg, no2),
pm25 = if_else(is.na(pm25), pm25_avg, pm25),
co = if_else(is.na(co), co_avg, co),
so2 = if_else(is.na(so2), so2_avg, so2)
) %>%
select(-ends_with("_avg"))  # Elimina las columnas de promedios temporales
summary(Bolivia_Por_Dias)
# Guardar como archivo .RDS:
saveRDS(Bolivia_Por_Dias, "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos/3.8 Bolivia_Por_Dias.rds")
# Limpiar el entorno
rm(list = ls())
## Librerias ------------------
library(pacman)
library(tidyverse) # Paquete grande de manipulacion
library(lubridate) # Paquete para manejo de fechas
library(skimr)     # Paquete para revision de datos
library(stargazer) # Paquete de tablas "bonitas", regs y estad desc
library(dplyr)     # Paquete parte de tidyverse donde esta mutate, select, filter, summarise...
library(rio)       # Paquete de importacion/exportacion de datos
library(gridExtra)
library(patchwork)
library(stats)
library(readxl)
library(writexl)
# Manejo del directorio
getwd()
directorio <- "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos"
setwd(directorio)
# Chequeo de los archivos del directorio
dir()
list.files()
## Importacion de los datos ------------------
install_formats() # Cuestiones de importacion de archivos del paquete rio
Guaymaral_Por_Dias <- import("3.1 Guaymaral_Por_Dias.RDS")
MinAmbiente_Por_Dias <- import("3.2 MinAmbiente_Por_Dias.RDS")
Suba_Por_Dias <- import("3.3 Suba_Por_Dias.RDS")
Usaquen_Por_Dias <- import("3.4 Usaquen_Por_Dias.RDS")
Ferias_Por_Dias <- import("3.5 Ferias_Por_Dias.RDS")
SanCristobal_Por_Dias <- import("3.6 SanCristobal_Por_Dias.RDS")
Tunal_Por_Dias <- import("3.7 Tunal_Por_Dias.RDS")
Bolivia_Por_Dias <- import("3.8 Bolivia_Por_Dias.RDS")
Carvajal_Por_Dias <- import("3.9 Carvajal_Por_Dias.RDS")
Fontibon_Por_Dias <- import("3.10 Fontibon_Por_Dias.RDS")
Kennedy_Por_Dias <- import("3.11 Kennedy_Por_Dias.RDS")
PuenteAranda_Por_Dias <- import("3.12 PuenteAranda_Por_Dias.RDS")
Centro_Por_Dias <- import("3.13 Centro_Por_Dias.RDS")
# Unir todas las bases de datos en una sola
all_data <- rbind(Guaymaral_Por_Dias, MinAmbiente_Por_Dias, Suba_Por_Dias,
Usaquen_Por_Dias, Ferias_Por_Dias, SanCristobal_Por_Dias,
Tunal_Por_Dias, Bolivia_Por_Dias, Carvajal_Por_Dias,
Fontibon_Por_Dias, Kennedy_Por_Dias, PuenteAranda_Por_Dias,
Centro_Por_Dias)
#view(all_data)
str(all_data)
# Renombrar la variable "myday" como "day"
all_data$day <- all_data$myday
# Importar base vacia
Bogota_Promedio_Dias <- read_excel("2. Datos (2021 -2024) - Diarios.xlsx")
view(Bogota_Promedio_Dias)
# Calcula los promedios diarios de cada contaminante y otras variables
promedios_diarios <- all_data %>%
group_by(day) %>%
summarise(across(.cols = c(o3, no2, pm25, co, so2, pm10, bc, tmp, rh, rain, radsolar, co2, pressure, ws), .fns = ~mean(.x, na.rm = TRUE)))
# Asegurándonos de que las fechas están en formato de fecha si no lo están
promedios_diarios$day <- as.Date(promedios_diarios$day)
Bogota_Promedio_Dias$myday <- as.Date(Bogota_Promedio_Dias$myday)
# Renombrar la columna de fecha en promedios_diarios para coincidir con Bogota_Promedio_Dias
promedios_diarios <- rename(promedios_diarios, myday = day)
# Uniendo los datos
Bogota_Promedio_Dias <- left_join(Bogota_Promedio_Dias, promedios_diarios, by = "myday")
head(Bogota_Promedio_Dias)
# Eliminar columnas que terminan en ".x" y están completamente vacías
Bogota_Promedio_Dias <- Bogota_Promedio_Dias %>%
select(-matches("\\.x$")) %>%
select_if(~ !all(is.na(.)))
# Verificar el resultado
str(Bogota_Promedio_Dias)
view(Bogota_Promedio_Dias)
# Renombrar variables quitando el sufijo ".y"
Bogota_Promedio_Dias <- Bogota_Promedio_Dias %>%
rename_with(~ gsub("\\.y$", "", .x), ends_with(".y"))
# Verificar los cambios
names(Bogota_Promedio_Dias)
# Guardar como archivo .RDS:
saveRDS(Bogota_Promedio_Dias, "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos/4. Bogota_Promedio_Dias.rds")
view(Bogota_Promedio_Dias)
# Exprtar data
write_xlsx(Bogota_Promedio_Dias, "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos/4. Bogota_Promedio_Dias.xlsx")
# Limpiar el entorno
rm(list = ls())
## Librerias ------------------
library(pacman)
library(tidyverse) # Paquete grande de manipulacion
library(lubridate) # Paquete para manejo de fechas
library(skimr)     # Paquete para revision de datos
library(stargazer) # Paquete de tablas "bonitas", regs y estad desc
library(dplyr)     # Paquete parte de tidyverse donde esta mutate, select, filter, summarise...
library(rio)       # Paquete de importacion/exportacion de datos
library(gridExtra)
library(patchwork)
library(stats)
library(readxl)
library(writexl)
library(ggplot2)
library(forecast)
library(tseries)
# Manejo del directorio
getwd()
directorio <- "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos"
setwd(directorio)
# Chequeo de los archivos del directorio
dir()
list.files()
## Importacion de los datos ------------------
install_formats() # Cuestiones de importacion de archivos del paquete rio
data <- import("4. Bogota_Promedio_Dias.RDS")
data2 <- import("4. Estaciones_Por_Dias_CO2.xlsx")
data3 <- import("4. Estaciones_Por_Dias_BC.xlsx")
modelo1 <- auto.arima(data$pm25)
modelo1
skim(data)
glimpse(data)
stargazer(data,
type = "text",
title = "Estadisticas Descriptivas")
## Valores atipicos CO
# Calcula el promedio de la variable 'co', excluyendo el valor máximo
media_sin_max <- mean(data$co[data$co != max(data$co)])
# Reemplaza el valor máximo por el promedio calculado
data$co[data$co == max(data$co)] <- media_sin_max
# Verificar los cambios
print(data)
min(data$myday)
max(data$myday)
# Serie de tiempo CO
data <- data %>% mutate(co_new = (co*28.01*101.325)/(8.314*298.15))
p_co <- ggplot(data, aes(myday, co_new)) +
geom_line() +
labs(x = "Tiempo",
y = "CO",
title = "Análisis del CO desde 2021 hasta 2024") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Centra y ajusta el título
axis.title = element_text(size = 14),  # Ajusta el tamaño de las etiquetas de los ejes
axis.text = element_text(size = 12),   # Ajusta el tamaño del texto de los ejes
plot.background = element_rect(fill = "white"),  # Cambia el fondo del gráfico
panel.grid.minor = element_blank()  # Elimina las líneas de cuadrícula menores
)
p_co
p_co + geom_hline(aes(yintercept = 4), data, color = "red")
# Exportar como PNG
ggsave("1. Análisis del CO desde 2021 hasta 2024.png",
plot = last_plot(),
path = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos",
width = 10, height = 6, units = "in", dpi = 300)
# Serie de tiempo NO2
data <- data %>% mutate(no2_new = ((no2/(10^9))*(1000)*(1/((1*0.082*(tmp+273.15))/0.74289484))*(46.0055/1)*((10^6)/1)))
p_no2 <- ggplot(data, aes(myday, no2_new)) +
geom_line() +
labs(x = "Tiempo",
y = "NO2",
title = "Análisis del NO2 desde 2021 hasta 2024") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Centra y ajusta el título
axis.title = element_text(size = 14),  # Ajusta el tamaño de las etiquetas de los ejes
axis.text = element_text(size = 12),   # Ajusta el tamaño del texto de los ejes
plot.background = element_rect(fill = "white"),  # Cambia el fondo del gráfico
panel.grid.minor = element_blank()  # Elimina las líneas de cuadrícula menores
)
p_no2
p_no2 + geom_hline(aes(yintercept = 25), data, color = "red")
# Exportar como PNG
ggsave("2. Análisis del NO2 desde 2021 hasta 2024.png",
plot = last_plot(),
path = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos",
width = 10, height = 6, units = "in", dpi = 300)
# Serie de tiempo PM2.5
p_pm25 <- ggplot(data, aes(myday, pm25)) +
geom_line() +
labs(x = "Tiempo",
y = "PM2.5",
title = "Análisis del PM2.5 desde 2021 hasta 2024") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Centra y ajusta el título
axis.title = element_text(size = 14),  # Ajusta el tamaño de las etiquetas de los ejes
axis.text = element_text(size = 12),   # Ajusta el tamaño del texto de los ejes
plot.background = element_rect(fill = "white"),  # Cambia el fondo del gráfico
panel.grid.minor = element_blank()  # Elimina las líneas de cuadrícula menores
)
p_pm25
p_pm25 + geom_hline(aes(yintercept = 15), data, color = "red")
library(tseries)
library(forecast)
modelo1 <- auto.arima(pm25)
# Exportar como PNG
ggsave("3. Análisis del PM2.5 desde 2021 hasta 2024.png",
plot = last_plot(),
path = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos",
width = 10, height = 6, units = "in", dpi = 300)
# Crear series de tiempo
ts_pm25 <- ts(data$pm25, frequency = 365)
# Análisis de estacionalidad usando ACF y PACF para PM2.5
acf_pm25 <- Acf(ts_pm25, main="Autocorrelación PM2.5")
pacf_pm25 <- Pacf(ts_pm25, main="Autocorrelación Parcial PM2.5")
# Descomposición estacional para visualizar tendencias y estacionalidad
decomp_pm25 <- stl(ts_pm25, s.window = "periodic")
plot(decomp_pm25, main = "Descomposición de PM2.5")
# Serie de tiempo PM10
p_pm10 <- ggplot(data, aes(myday, pm10)) +
geom_line() +
labs(x = "Tiempo",
y = "PM10",
title = "Análisis del PM10 desde 2021 hasta 2024") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Centra y ajusta el título
axis.title = element_text(size = 14),  # Ajusta el tamaño de las etiquetas de los ejes
axis.text = element_text(size = 12),   # Ajusta el tamaño del texto de los ejes
plot.background = element_rect(fill = "white"),  # Cambia el fondo del gráfico
panel.grid.minor = element_blank()  # Elimina las líneas de cuadrícula menores
)
p_pm10
p_pm10 + geom_hline(aes(yintercept = 45), data, color = "red")
# Exportar como PNG
ggsave("4. Análisis del PM10 desde 2021 hasta 2024.png",
plot = last_plot(),
path = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos",
width = 10, height = 6, units = "in", dpi = 300)
# Serie de tiempo SO2
data <- data %>% mutate(so2_new = ((so2/(10^9))*(1000)*(1/((1*0.082*(tmp+273.15))/0.74289484))*(64.066/1)*((10^6)/1)))
p_so2 <- ggplot(data, aes(myday, so2_new)) +
geom_line() +
labs(x = "Tiempo",
y = "SO2",
title = "Análisis del SO2 desde 2021 hasta 2024") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Centra y ajusta el título
axis.title = element_text(size = 14),  # Ajusta el tamaño de las etiquetas de los ejes
axis.text = element_text(size = 12),   # Ajusta el tamaño del texto de los ejes
plot.background = element_rect(fill = "white"),  # Cambia el fondo del gráfico
panel.grid.minor = element_blank()  # Elimina las líneas de cuadrícula menores
)
p_so2
p_so2 + geom_hline(aes(yintercept = 40), data, color = "red")
# Exportar como PNG
ggsave("5. Análisis del SO2 desde 2021 hasta 2024.png",
plot = last_plot(),
path = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos",
width = 10, height = 6, units = "in", dpi = 300)
# Serie de tiempo 03
data <- data %>% mutate(o3_new = ((o3/(10^9))*(1000)*(1/((1*0.082*(tmp+273.15))/0.74289484))*(48/1)*((10^6)/1)))
p_o3 <- ggplot(data, aes(myday, o3_new)) +
geom_line() +
labs(x = "Tiempo",
y = "O3",
title = "Análisis del O3 desde 2021 hasta 2024") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Centra y ajusta el título
axis.title = element_text(size = 14),  # Ajusta el tamaño de las etiquetas de los ejes
axis.text = element_text(size = 12),   # Ajusta el tamaño del texto de los ejes
plot.background = element_rect(fill = "white"),  # Cambia el fondo del gráfico
panel.grid.minor = element_blank()  # Elimina las líneas de cuadrícula menores
)
p_o3
p_o3 + geom_hline(aes(yintercept = 100*(24/8)), data, color = "red")
# Exportar como PNG
ggsave("6. Análisis del O3 desde 2021 hasta 2024.png",
plot = last_plot(),
path = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos",
width = 10, height = 6, units = "in", dpi = 300)
# Serie de tiempo CO2
min(data2$myday)
max(data2$myday)
p_co2 <- ggplot(data2, aes(myday, co2)) +
geom_line() +
labs(x = "Tiempo",
y = "co2",
title = "Análisis del CO2 desde 2021 hasta comienzos del 2022") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Centra y ajusta el título
axis.title = element_text(size = 14),  # Ajusta el tamaño de las etiquetas de los ejes
axis.text = element_text(size = 12),   # Ajusta el tamaño del texto de los ejes
plot.background = element_rect(fill = "white"),  # Cambia el fondo del gráfico
panel.grid.minor = element_blank()  # Elimina las líneas de cuadrícula menores
)
p_co2
p_co2 + geom_hline(aes(yintercept = 1000), data, color = "red")
# Exportar como PNG
ggsave("7. Análisis del CO2 desde 2021 hasta 2022.png",
plot = last_plot(),
path = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos",
width = 10, height = 6, units = "in", dpi = 300)
# Serie de tiempo BC
min(data3$myday)
max(data3$myday)
p_bc <- ggplot(data3, aes(myday, bc)) +
geom_line() +
labs(x = "Tiempo",
y = "BC",
title = "Análisis del BC desde mediados del 2023 hasta comienzos del 2024") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Centra y ajusta el título
axis.title = element_text(size = 14),  # Ajusta el tamaño de las etiquetas de los ejes
axis.text = element_text(size = 12),   # Ajusta el tamaño del texto de los ejes
plot.background = element_rect(fill = "white"),  # Cambia el fondo del gráfico
panel.grid.minor = element_blank()  # Elimina las líneas de cuadrícula menores
)
p_bc
# Exportar como PNG
ggsave("8. Análisis del BC desde 2023 hasta 2024.png",
plot = last_plot(),
path = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos",
width = 10, height = 6, units = "in", dpi = 300)
# Serie de tiempo NO2
data <- data %>% mutate(no2_new = ((no2/(10^9))*(1000)*(1/((1*0.082*(tmp+273.15))/(pressure/760)))*(46.0055/1)*((10^6)/1)))
# Limpiar el entorno
rm(list = ls())
## Librerias ------------------
library(pacman)
library(tidyverse) # Paquete grande de manipulacion
library(lubridate) # Paquete para manejo de fechas
library(skimr)     # Paquete para revision de datos
library(stargazer) # Paquete de tablas "bonitas", regs y estad desc
library(dplyr)     # Paquete parte de tidyverse donde esta mutate, select, filter, summarise...
library(rio)       # Paquete de importacion/exportacion de datos
library(gridExtra)
library(patchwork)
library(stats)
library(readxl)
library(writexl)
library(ggplot2)
library(forecast)
library(tseries)
# Manejo del directorio
getwd()
directorio <- "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/1. Datos"
setwd(directorio)
# Chequeo de los archivos del directorio
dir()
list.files()
## Importacion de los datos ------------------
install_formats() # Cuestiones de importacion de archivos del paquete rio
data <- import("4. Bogota_Promedio_Dias.RDS")
data2 <- import("4. Estaciones_Por_Dias_CO2.xlsx")
data3 <- import("4. Estaciones_Por_Dias_BC.xlsx")
modelo1 <- auto.arima(data$pm25)
modelo1
skim(data)
glimpse(data)
stargazer(data,
type = "text",
title = "Estadisticas Descriptivas")
## Valores atipicos CO
# Calcula el promedio de la variable 'co', excluyendo el valor máximo
media_sin_max <- mean(data$co[data$co != max(data$co)])
# Reemplaza el valor máximo por el promedio calculado
data$co[data$co == max(data$co)] <- media_sin_max
# Verificar los cambios
print(data)
min(data$myday)
max(data$myday)
# Serie de tiempo CO
data <- data %>% mutate(co_new = (co*28.01*101.325)/(8.314*298.15))
p_co <- ggplot(data, aes(myday, co_new)) +
geom_line() +
labs(x = "Tiempo",
y = "CO",
title = "Análisis del CO desde 2021 hasta 2024") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Centra y ajusta el título
axis.title = element_text(size = 14),  # Ajusta el tamaño de las etiquetas de los ejes
axis.text = element_text(size = 12),   # Ajusta el tamaño del texto de los ejes
plot.background = element_rect(fill = "white"),  # Cambia el fondo del gráfico
panel.grid.minor = element_blank()  # Elimina las líneas de cuadrícula menores
)
p_co
p_co + geom_hline(aes(yintercept = 4), data, color = "red")
# Exportar como PNG
ggsave("1. Análisis del CO desde 2021 hasta 2024.png",
plot = last_plot(),
path = "C:/Users/windows/Documents/GitHub/Problem_Set_1/Proyecto-de-grado-IIND/Proyecto de grado IIND/4. Gráficos",
width = 10, height = 6, units = "in", dpi = 300)
# Serie de tiempo NO2
data <- data %>% mutate(no2_new = ((no2/(10^9))*(1000)*(1/((1*0.082*(tmp+273.15))/(pressure/760)))*(46.0055/1)*((10^6)/1)))
p_no2 <- ggplot(data, aes(myday, no2_new)) +
geom_line() +
labs(x = "Tiempo",
y = "NO2",
title = "Análisis del NO2 desde 2021 hasta 2024") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Centra y ajusta el título
axis.title = element_text(size = 14),  # Ajusta el tamaño de las etiquetas de los ejes
axis.text = element_text(size = 12),   # Ajusta el tamaño del texto de los ejes
plot.background = element_rect(fill = "white"),  # Cambia el fondo del gráfico
panel.grid.minor = element_blank()  # Elimina las líneas de cuadrícula menores
)
p_no2
p_no2 + geom_hline(aes(yintercept = 25), data, color = "red")
View(data)
